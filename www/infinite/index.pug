extends /layout2/_layout

block head
	title #{title}

block main
	include /layout2/_menu
	.ui.container
		.ui.segments
			.ui.segment
				p
				#cards.ui.three.column.stackable.grid
	script.
		var feed
		var i, len, batchSize = 10
		var $cards
		var filteredItems = []
		var lastItemIsVisible;
		window.onhashchange = function(event) { //menu links change hash
			var tag = location.href.split('#')[1]; //hash value or null
			render(tag)
		}
		function showMore(){ //infinite scroll
			$('.lastItem').removeClass('lastItem');
			var maxPos = Math.min(len, i+batchSize)-1
			for (i; i <= maxPos; i++ )
			{
				var c = document.createElement('div')
				filteredItems[i].prefix = feed.prefix //included in items.json from meta.yaml
				//itemDBind is function in /blog/item_d.js, great Pug dynamic binding feature
				c.innerHTML = itemDBind(filteredItems[i])
				var el = c.firstChild //only using div to convert string to DOM
				if (i == maxPos && i < len) //add class .last to last item of batch
					el.classList.add('lastItem');
				$cards.appendChild(el)
			}
			$(window).off('resize scroll') //remove any old handlers
			if (i <= len) //only do it when list is incomplete
			{
				var lastItem = $('.lastItem')
				if (lastItem.length) //we found one
				{
					lastItemIsVisible = isInViewport(lastItem)
					if (lastItemIsVisible)
						loadMore() // already visible, maybe huge screen, load more
					else
					{
						var handler = onVisibilityChange(lastItem, function() {
							showMore()
						})
						$(window).on('resize scroll', handler);

					}
				}
			}
		}
		function render(tag){
			var data = Object.assign({}, feed) //work on copy
			//simulate a long list (6 items x 32 = 192 items)
			data.items = data.items.concat(data.items)
			data.items = data.items.concat(data.items)
			data.items = data.items.concat(data.items)
			data.items = data.items.concat(data.items)
			data.items = data.items.concat(data.items)
			filteredItems = data.items
			if (tag) {
				filteredItems = data.items.filter(function(item){
					if (!item.tags) return false;
					return (item.tags.filter(function(t){ return tag.split(',').indexOf(t) > -1 })).length > 0 //support comma-delimited multiple
				})
			}
			i = 0
			len = filteredItems.length
			$cards = $('#cards').empty()[0] //clear any cards from previous search/selection and return DOM node
			showMore() //show a few
		}
		loadjs.ready(['core'], function () {// load data
			fetch('/blog/items.json').then(function(resp) {
				return resp.json()
			}).then(function(json) {
				feed = json
				loadjs.ready(['dbind-infinite','site'], function() {
					var tag = location.href.split('#')[1];
					render(tag) //first time, or after nav
				})
			})
		})
		loadjs.ready('core', function() {
			if (!loadjs.isDefined('dbind-infinite')) //need this for tsrouter.js
			{
				loadjs([
					'/infinite/item_d.js'
				],'dbind-infinite', {async: false})
			}
			else
				loadjs.done('dbind-infinite')
		})

		function isInViewport(el) {
			if (!el.length) return false;
			var elementTop = el.offset().top;
			var viewportBottom = $(window).scrollTop() + $(window).height();
			return elementTop < viewportBottom;
		}

		function onVisibilityChange(el, callback) {
			return function () {
				var newVisible = isInViewport(el);

				if (newVisible != lastItemIsVisible) {
					lastItemIsVisible = newVisible;
					if (typeof callback == 'function') {
						callback();
					}
				}
			}
		}
